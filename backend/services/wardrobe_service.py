from typing import List, Optional, Union
from uuid import UUID
import time
import io
import base64
import httpx
from PIL import Image
from sqlalchemy.orm import Session
from database.models import ClothingItem, OutfitLook, LookItem, AnalysisHistory
from schemas.clothing_analysis import SinglePieceResponse, CompleteLookResponse, ClothingPiece as ClothingPieceSchema


class WardrobeService:
    def __init__(self, db: Session):
        self.db = db
    
    async def crop_and_save_piece_image(self, original_image_url: str, bounding_box: dict, piece_id: UUID, user_id: UUID) -> Optional[str]:
        """D√©coupe une pi√®ce de l'image originale et la sauvegarde dans le bucket"""
        print(f"üî™ D√©but d√©coupage pour pi√®ce {piece_id}")
        print(f"   - Image originale: {original_image_url}")
        print(f"   - Bounding box: {bounding_box}")
        try:
            # T√©l√©charger l'image originale
            print(f"   üì• T√©l√©chargement de l'image...")
            async with httpx.AsyncClient() as client:
                response = await client.get(original_image_url)
                response.raise_for_status()
                image_data = response.content
                print(f"   ‚úÖ Image t√©l√©charg√©e: {len(image_data)} bytes")
            
            # Ouvrir l'image avec PIL
            image = Image.open(io.BytesIO(image_data))
            img_width, img_height = image.size
            print(f"   üìê Dimensions originales: {img_width}x{img_height}")
            
            # Calculer les coordonn√©es absolues
            crop_x = int(bounding_box['x'] * img_width)
            crop_y = int(bounding_box['y'] * img_height)
            crop_width = int(bounding_box['width'] * img_width)
            crop_height = int(bounding_box['height'] * img_height)
            print(f"   üéØ Coordonn√©es calcul√©es: x={crop_x}, y={crop_y}, w={crop_width}, h={crop_height}")
            
            # S'assurer que les coordonn√©es sont valides
            crop_x = max(0, min(crop_x, img_width - 1))
            crop_y = max(0, min(crop_y, img_height - 1))
            crop_width = max(10, min(crop_width, img_width - crop_x))
            crop_height = max(10, min(crop_height, img_height - crop_y))
            print(f"   ‚úÇÔ∏è Coordonn√©es ajust√©es: x={crop_x}, y={crop_y}, w={crop_width}, h={crop_height}")
            
            # D√©couper l'image
            cropped_image = image.crop((
                crop_x,
                crop_y, 
                crop_x + crop_width,
                crop_y + crop_height
            ))
            print(f"   üñºÔ∏è Image d√©coup√©e: {cropped_image.size}")
            
            # Convertir en bytes pour l'upload
            output_buffer = io.BytesIO()
            cropped_image.save(output_buffer, format='JPEG', quality=85)
            cropped_data = output_buffer.getvalue()
            
            # Upload vers Supabase Storage
            from supabase import create_client
            import os
            import base64
            
            supabase_url = os.getenv("EXPO_PUBLIC_SUPABASE_URL")
            supabase_key = os.getenv("SUPABASE_SERVICE_KEY")
            
            if not supabase_url or not supabase_key:
                print("   ‚ö†Ô∏è Cl√©s Supabase manquantes - sauvegarde locale temporaire")
                # Pour l'instant, retourner une URL temporaire
                temp_filename = f"piece_{user_id}_{piece_id}_{int(time.time())}.jpg"
                return f"data:image/jpeg;base64,{base64.b64encode(cropped_data).decode()}"
                
            supabase = create_client(supabase_url, supabase_key)
            
            # Nom du fichier pour la pi√®ce
            filename = f"piece_{user_id}_{piece_id}_{int(time.time())}.jpg"
            print(f"   üì§ Upload vers Supabase: {filename}")
            
            # Upload du fichier
            result = supabase.storage.from_("wardrobe").upload(
                filename,
                cropped_data,
                file_options={
                    "content-type": "image/jpeg",
                    "upsert": "true"
                }
            )
            
            # Debug: voir la structure de la r√©ponse
            print(f"   üîç Structure result: {type(result)}")
            print(f"   üîç Attributs: {[attr for attr in dir(result) if not attr.startswith('_')]}")
            
            # V√©rifier si l'upload a r√©ussi (la nouvelle API Supabase peut retourner diff√©rents formats)
            if hasattr(result, 'data') and result.data:
                # Ancienne API
                public_url = supabase.storage.from_("wardrobe").get_public_url(filename)
                print(f"   ‚úÖ Upload r√©ussi: {public_url.data.public_url}")
                return public_url.data.public_url
            elif hasattr(result, 'path') or not hasattr(result, 'error'):
                # Nouvelle API - l'upload a r√©ussi si pas d'erreur
                public_url = supabase.storage.from_("wardrobe").get_public_url(filename)
                full_url = public_url.data.public_url if hasattr(public_url, 'data') else public_url
                print(f"   ‚úÖ Upload r√©ussi: {full_url}")
                return full_url
            else:
                error_msg = result.error if hasattr(result, 'error') else "Upload failed"
                print(f"   ‚ùå Erreur upload: {error_msg}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du d√©coupage/upload de l'image: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def save_single_piece(self, user_id: UUID, piece_data: SinglePieceResponse, image_url: Optional[str] = None) -> ClothingItem:
        """Sauvegarde une pi√®ce unique dans la base de donn√©es"""
        
        start_time = time.time()
        piece = piece_data.pieces[0]  # Une pi√®ce unique a toujours exactement 1 pi√®ce
        
        # Utiliser le nom g√©n√©r√© par l'IA ou fallback sur piece_type
        piece_name = piece.name if hasattr(piece, 'name') and piece.name else piece.piece_type
        
        # Cr√©er la pi√®ce
        db_piece = ClothingItem(
            id=piece.piece_id,
            user_id=user_id,
            piece_type=piece.piece_type,
            name=piece_name,
            colors={
                "primary": piece.attributes.colors.primary,
                "secondary": piece.attributes.colors.secondary
            },
            material=piece.attributes.material,
            pattern=piece.attributes.pattern,
            fit=piece.attributes.fit,
            details=piece.attributes.details,
            style_tags=piece.style_tags,
            occasion_tags=piece.occasion_tags,
            seasonality=piece.seasonality,
            image_url=image_url
        )
        
        self.db.add(db_piece)
        self.db.flush()  # Pour obtenir l'ID avant le commit
        
        # Sauvegarder l'historique d'analyse
        analysis_history = AnalysisHistory(
            user_id=user_id,
            capture_type="single_piece",
            raw_analysis=piece_data.model_dump(mode='json'),  # Utiliser mode='json' pour s√©rialiser les UUID
            created_item_id=db_piece.id,
            analysis_duration_ms=int((time.time() - start_time) * 1000)
        )
        self.db.add(analysis_history)
        
        self.db.commit()
        self.db.refresh(db_piece)
        
        return db_piece
    
    async def save_complete_look(self, user_id: UUID, look_data: CompleteLookResponse, image_url: Optional[str] = None) -> OutfitLook:
        """Sauvegarde une tenue compl√®te dans la base de donn√©es"""
        
        start_time = time.time()
        
        # Cr√©er le nom du look bas√© sur le style dominant
        look_name = f"Look {look_data.look_meta.dominant_style[0]}" if look_data.look_meta.dominant_style else "Look"
        
        # Cr√©er le look
        db_look = OutfitLook(
            id=look_data.look_meta.look_id,
            user_id=user_id,
            name=look_name,
            dominant_style=look_data.look_meta.dominant_style,
            occasion_tags=look_data.look_meta.occasion_tags,
            seasonality=look_data.look_meta.seasonality,
            color_palette={
                "primary": look_data.look_meta.color_palette_global.primary,
                "accent": look_data.look_meta.color_palette_global.accent
            },
            pattern_mix=look_data.look_meta.pattern_mix,
            silhouette=look_data.look_meta.silhouette,
            layering_level=look_data.look_meta.layering_level,
            image_url=image_url
        )
        
        self.db.add(db_look)
        self.db.flush()
        
        # Sauvegarder chaque pi√®ce et cr√©er les liens
        for idx, piece in enumerate(look_data.pieces):
            # V√©rifier si la pi√®ce existe d√©j√†
            existing_piece = self.db.query(ClothingItem).filter_by(
                id=piece.piece_id
            ).first()
            
            piece_image_url = None
            
            # D√©couper et sauvegarder l'image de la pi√®ce si elle a des coordonn√©es
            if piece.bounding_box and image_url:
                print(f"üéØ D√©coupage de la pi√®ce {piece.piece_type} (ID: {piece.piece_id})")
                print(f"   - Coordonn√©es: {piece.bounding_box}")
                bounding_box_dict = {
                    'x': piece.bounding_box.x,
                    'y': piece.bounding_box.y, 
                    'width': piece.bounding_box.width,
                    'height': piece.bounding_box.height
                }
                piece_image_url = await self.crop_and_save_piece_image(
                    image_url, 
                    bounding_box_dict, 
                    piece.piece_id, 
                    user_id
                )
                if piece_image_url:
                    print(f"   ‚úÖ Image de pi√®ce sauvegard√©e: {piece_image_url}")
                else:
                    print(f"   ‚ùå √âchec sauvegarde image pour {piece.piece_type}")
            
            if not existing_piece:
                # Utiliser le nom g√©n√©r√© par l'IA ou fallback sur piece_type
                piece_name = piece.name if hasattr(piece, 'name') and piece.name else piece.piece_type
                
                # Cr√©er la nouvelle pi√®ce avec son image d√©coup√©e
                db_piece = ClothingItem(
                    id=piece.piece_id,
                    user_id=user_id,
                    piece_type=piece.piece_type,
                    name=piece_name,
                    colors={
                        "primary": piece.attributes.colors.primary,
                        "secondary": piece.attributes.colors.secondary
                    },
                    material=piece.attributes.material,
                    pattern=piece.attributes.pattern,
                    fit=piece.attributes.fit,
                    details=piece.attributes.details,
                    style_tags=piece.style_tags,
                    occasion_tags=piece.occasion_tags,
                    seasonality=piece.seasonality,
                    image_url=piece_image_url  # URL de l'image d√©coup√©e
                )
                self.db.add(db_piece)
                item_id = db_piece.id
            else:
                # Mettre √† jour l'image de la pi√®ce existante si une nouvelle a √©t√© g√©n√©r√©e
                if piece_image_url:
                    existing_piece.image_url = piece_image_url
                    print(f"   üìù Mise √† jour image_url pour pi√®ce existante {existing_piece.id}: {piece_image_url}")
                    self.db.flush()  # S'assurer que la mise √† jour est persist√©e
                item_id = existing_piece.id
            
            # Pr√©parer les coordonn√©es de la bounding box si disponibles
            bounding_box = None
            if piece.bounding_box:
                bounding_box = {
                    "x": piece.bounding_box.x,
                    "y": piece.bounding_box.y,
                    "width": piece.bounding_box.width,
                    "height": piece.bounding_box.height
                }
            
            # Cr√©er le lien look-pi√®ce avec coordonn√©es
            look_item = LookItem(
                look_id=db_look.id,
                item_id=item_id,
                position=idx,
                bounding_box=bounding_box
            )
            self.db.add(look_item)
        
        # Sauvegarder l'historique d'analyse
        analysis_history = AnalysisHistory(
            user_id=user_id,
            capture_type="complete_look",
            raw_analysis=look_data.model_dump(mode='json'),  # Utiliser mode='json' pour s√©rialiser les UUID
            created_look_id=db_look.id,
            analysis_duration_ms=int((time.time() - start_time) * 1000)
        )
        self.db.add(analysis_history)
        
        self.db.commit()
        self.db.refresh(db_look)
        
        return db_look
    
    def get_user_pieces(self, user_id: UUID, piece_type: Optional[str] = None) -> List[ClothingItem]:
        """R√©cup√®re les pi√®ces d'un utilisateur"""
        
        query = self.db.query(ClothingItem).filter_by(
            user_id=user_id,
            is_active=True
        )
        
        if piece_type:
            query = query.filter_by(piece_type=piece_type)
        
        return query.order_by(ClothingItem.created_at.desc()).all()
    
    def get_user_looks(self, user_id: UUID) -> List[OutfitLook]:
        """R√©cup√®re les tenues d'un utilisateur avec les pi√®ces et leurs coordonn√©es"""
        
        from sqlalchemy.orm import joinedload
        
        return self.db.query(OutfitLook).filter_by(
            user_id=user_id
        ).options(
            joinedload(OutfitLook.items).joinedload(LookItem.item)  # Charge les look_items avec leurs items et coordonn√©es
        ).order_by(OutfitLook.created_at.desc()).all()